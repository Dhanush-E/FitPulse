{"ast":null,"code":"/**\n * Generate password from allowed word\n */\nconst crypto = require('crypto');\nconst digits = '0123456789';\nconst lowerCaseAlphabets = 'abcdefghijklmnopqrstuvwxyz';\nconst upperCaseAlphabets = lowerCaseAlphabets.toUpperCase();\nconst specialChars = '#!&@';\nmodule.exports = {\n  /**\n   * Generate OTP of the length\n   * @param  {number} length length of password.\n   * @param  {object} options\n   * @param  {boolean} options.digits Default: `true` true value includes digits in OTP\n   * @param  {boolean} options.lowerCaseAlphabets Default: `true` true value includes lowercase alphabets in OTP\n   * @param  {boolean} options.upperCaseAlphabets Default: `true` true value includes uppercase alphabets in OTP\n   * @param  {boolean} options.specialChars Default: `true` true value includes specialChars in OTP\n   */\n  generate: function (length, options) {\n    length = length || 10;\n    const generateOptions = options || {};\n    generateOptions.digits = Object.prototype.hasOwnProperty.call(generateOptions, 'digits') ? options.digits : true;\n    generateOptions.lowerCaseAlphabets = Object.prototype.hasOwnProperty.call(generateOptions, 'lowerCaseAlphabets') ? options.lowerCaseAlphabets : true;\n    generateOptions.upperCaseAlphabets = Object.prototype.hasOwnProperty.call(generateOptions, 'upperCaseAlphabets') ? options.upperCaseAlphabets : true;\n    generateOptions.specialChars = Object.prototype.hasOwnProperty.call(generateOptions, 'specialChars') ? options.specialChars : true;\n    const allowsChars = ((generateOptions.digits || '') && digits) + ((generateOptions.lowerCaseAlphabets || '') && lowerCaseAlphabets) + ((generateOptions.upperCaseAlphabets || '') && upperCaseAlphabets) + ((generateOptions.specialChars || '') && specialChars);\n    let password = '';\n    while (password.length < length) {\n      const charIndex = crypto.randomInt(0, allowsChars.length);\n      if (password.length === 0 && generateOptions.digits === true && allowsChars[charIndex] === '0') {\n        continue;\n      }\n      password += allowsChars[charIndex];\n    }\n    return password;\n  }\n};","map":{"version":3,"names":["crypto","require","digits","lowerCaseAlphabets","upperCaseAlphabets","toUpperCase","specialChars","module","exports","generate","length","options","generateOptions","Object","prototype","hasOwnProperty","call","allowsChars","password","charIndex","randomInt"],"sources":["C:/Desktop/fitpulse/Fitpulse/fitpulse-UI/node_modules/otp-generator/index.js"],"sourcesContent":["/**\n * Generate password from allowed word\n */\nconst crypto = require('crypto')\n\nconst digits = '0123456789'\nconst lowerCaseAlphabets = 'abcdefghijklmnopqrstuvwxyz'\nconst upperCaseAlphabets = lowerCaseAlphabets.toUpperCase()\nconst specialChars = '#!&@'\n\nmodule.exports = {\n  /**\n   * Generate OTP of the length\n   * @param  {number} length length of password.\n   * @param  {object} options\n   * @param  {boolean} options.digits Default: `true` true value includes digits in OTP\n   * @param  {boolean} options.lowerCaseAlphabets Default: `true` true value includes lowercase alphabets in OTP\n   * @param  {boolean} options.upperCaseAlphabets Default: `true` true value includes uppercase alphabets in OTP\n   * @param  {boolean} options.specialChars Default: `true` true value includes specialChars in OTP\n   */\n  generate: function (length, options) {\n    length = length || 10\n    const generateOptions = options || {}\n\n    generateOptions.digits = Object.prototype.hasOwnProperty.call(generateOptions, 'digits') ? options.digits : true\n    generateOptions.lowerCaseAlphabets = Object.prototype.hasOwnProperty.call(generateOptions, 'lowerCaseAlphabets') ? options.lowerCaseAlphabets : true\n    generateOptions.upperCaseAlphabets = Object.prototype.hasOwnProperty.call(generateOptions, 'upperCaseAlphabets') ? options.upperCaseAlphabets : true\n    generateOptions.specialChars = Object.prototype.hasOwnProperty.call(generateOptions, 'specialChars') ? options.specialChars : true\n\n    const allowsChars = ((generateOptions.digits || '') && digits) +\n      ((generateOptions.lowerCaseAlphabets || '') && lowerCaseAlphabets) +\n      ((generateOptions.upperCaseAlphabets || '') && upperCaseAlphabets) +\n      ((generateOptions.specialChars || '') && specialChars)\n    let password = ''\n    while (password.length < length) {\n      const charIndex = crypto.randomInt(0, allowsChars.length)\n      if (password.length === 0 && generateOptions.digits === true && allowsChars[charIndex] === '0') {\n        continue\n      }\n      password += allowsChars[charIndex]\n    }\n    return password\n  }\n\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAEhC,MAAMC,MAAM,GAAG,YAAY;AAC3B,MAAMC,kBAAkB,GAAG,4BAA4B;AACvD,MAAMC,kBAAkB,GAAGD,kBAAkB,CAACE,WAAW,EAAE;AAC3D,MAAMC,YAAY,GAAG,MAAM;AAE3BC,MAAM,CAACC,OAAO,GAAG;EACf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,QAAQ,EAAE,SAAAA,CAAUC,MAAM,EAAEC,OAAO,EAAE;IACnCD,MAAM,GAAGA,MAAM,IAAI,EAAE;IACrB,MAAME,eAAe,GAAGD,OAAO,IAAI,CAAC,CAAC;IAErCC,eAAe,CAACV,MAAM,GAAGW,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACJ,eAAe,EAAE,QAAQ,CAAC,GAAGD,OAAO,CAACT,MAAM,GAAG,IAAI;IAChHU,eAAe,CAACT,kBAAkB,GAAGU,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACJ,eAAe,EAAE,oBAAoB,CAAC,GAAGD,OAAO,CAACR,kBAAkB,GAAG,IAAI;IACpJS,eAAe,CAACR,kBAAkB,GAAGS,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACJ,eAAe,EAAE,oBAAoB,CAAC,GAAGD,OAAO,CAACP,kBAAkB,GAAG,IAAI;IACpJQ,eAAe,CAACN,YAAY,GAAGO,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACJ,eAAe,EAAE,cAAc,CAAC,GAAGD,OAAO,CAACL,YAAY,GAAG,IAAI;IAElI,MAAMW,WAAW,GAAG,CAAC,CAACL,eAAe,CAACV,MAAM,IAAI,EAAE,KAAKA,MAAM,KAC1D,CAACU,eAAe,CAACT,kBAAkB,IAAI,EAAE,KAAKA,kBAAkB,CAAC,IACjE,CAACS,eAAe,CAACR,kBAAkB,IAAI,EAAE,KAAKA,kBAAkB,CAAC,IACjE,CAACQ,eAAe,CAACN,YAAY,IAAI,EAAE,KAAKA,YAAY,CAAC;IACxD,IAAIY,QAAQ,GAAG,EAAE;IACjB,OAAOA,QAAQ,CAACR,MAAM,GAAGA,MAAM,EAAE;MAC/B,MAAMS,SAAS,GAAGnB,MAAM,CAACoB,SAAS,CAAC,CAAC,EAAEH,WAAW,CAACP,MAAM,CAAC;MACzD,IAAIQ,QAAQ,CAACR,MAAM,KAAK,CAAC,IAAIE,eAAe,CAACV,MAAM,KAAK,IAAI,IAAIe,WAAW,CAACE,SAAS,CAAC,KAAK,GAAG,EAAE;QAC9F;MACF;MACAD,QAAQ,IAAID,WAAW,CAACE,SAAS,CAAC;IACpC;IACA,OAAOD,QAAQ;EACjB;AAEF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}